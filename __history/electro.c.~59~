#include <electro.h>
#include <stdio.h>
 
char buffer[4];
int i = 0;
int16 diz, unit;
boolean flag = 0;
int16 limitDist = 100;
int16 distance, time;

int d,c,u;

#int_RDA
void RDA_isr(void)
{
    buffer[i] = getc();
    if(buffer[0] == ':' && flag == 0){
        i++;
        if(i>4){
            i = 0;
            flag = 1;
        }
    }
}

void main()
{
    setup_adc_ports(NO_ANALOGS);
    setup_adc(ADC_OFF);
    setup_psp(PSP_DISABLED);
    setup_spi(FALSE);
    setup_wdt(WDT_OFF);
    setup_timer_0(RTCC_INTERNAL);
    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);
    setup_timer_2(T2_DISABLED,0,1);
    setup_comparator(NC_NC_NC_NC);
    setup_vref(FALSE);
    enable_interrupts(INT_RDA);
    enable_interrupts(GLOBAL);
    setup_oscillator(FALSE);
 


while(true){
    output_high(pin_C1);
    delay_ms(20);
    output_low(pin_C1);

    while(!input(pin_C0)){

    }

    set_timer(0);

    while(input(pin_C0)){

    }

    time=get_timer1();
    distance = time*0.028;
    printf("%ld",distance);
    printf("\n");
    delay_ms(500);

    if(distance < limitDist){
        output_high(PIN_E0);
        output_low(PIN_E1);
        printf('Al_OFF\n');
    }else{
        output_low(PIN_E0);
        output_toggle(PIN_E1);
        printf("Al_ON\n");
    }
    
    // gestion afficheurs
    if(distance < 100){
        output_low(PIN_E2);
        diz = distance/10;
        unit = distance - (diz*10);
        output_b((diz<<4)+unit);
    }else{
        output_high(PIN_E2);
        diz = distance/100;
        output_high(PIN_E2);
        diz = distance/100;
        unit = (distance - (diz*100))/10;
        output_b((diz<<4)+unit);
    }

    if(flag == 1){
        flag = 0;
        c = buffer[1]-48;
        d = buffer[2]-48;
        u = buffer[3]-48;
        limitDist = (int16) (c*100+d*10+u);
    }

    c = limitDist/100;
    d = (limitDist-(c*100))/10;
    u = (limitDist-(c*100))-(d*10);

 

}

